{"version":3,"file":"dagre-plus.es.js","sources":["../src/parser.js","../index.js"],"sourcesContent":["/**\r\n * 图的扁平的数据结构转成布局需要的树型\r\n * @param graphData\r\n * @return {{}}\r\n */\r\nexport function parse(graphData) {\r\n    const {nodes, edges} = graphData;\r\n\r\n    const edgeSet = new Set(edges);\r\n    const nodeMap = convertNodesToMap(nodes);\r\n\r\n    // 找到根节点\r\n    const rootNodes = nodes.filter(node => !node.parent);\r\n\r\n    return parseNodesToTree(rootNodes, nodeMap, edgeSet);\r\n}\r\n\r\nfunction parseNodesToTree(rootNodes, nodeMap, edgeSet) {\r\n    const rootPart = {nodes: [], edges: []};\r\n    rootNodes.forEach(node => {\r\n        rootPart.nodes.push(node);\r\n        rootPart.edges.push(...filterEdgesFromEdgeSetByNodeId(edgeSet, node.id));\r\n\r\n        const children = node.children;\r\n        if (children && children.length) {\r\n            const childNodes = [];\r\n            children.forEach(childNodeId => {\r\n                const childNode = nodeMap.get(childNodeId);\r\n                nodeMap.delete(childNodeId);\r\n                childNodes.push(childNode)\r\n            });\r\n            node.part = parseNodesToTree(childNodes, nodeMap, edgeSet);\r\n        }\r\n    })\r\n    return rootPart;\r\n}\r\n\r\n// 从 edge 集合里边筛选节点相关的边并从集合中移除\r\nfunction filterEdgesFromEdgeSetByNodeId(edgeSet, nodeId) {\r\n    const result = [];\r\n    for (let edge of edgeSet) {\r\n        if (edge.source === nodeId || edge.target === nodeId) {\r\n            result.push(edge);\r\n            edgeSet.delete(edge);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 节点列表转成 map\r\n * @param nodes\r\n * @return {Map<any, any>}\r\n */\r\nfunction convertNodesToMap(nodes) {\r\n    const nodeMap = new Map();\r\n\r\n    nodes.forEach(node => {\r\n        nodeMap.set(node.id, node);\r\n    })\r\n    return nodeMap;\r\n}\r\n","export {parse} from './src/parser'\r\n\r\nexport function layout(parsedGraph) {\r\n    const layoutData = {};\r\n    return layoutData;\r\n}\r\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACO,SAAS,KAAK,CAAC,SAAS,EAAE;AACjC,IAAI,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,SAAS,CAAC;AACrC;AACA,IAAI,MAAM,OAAO,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC;AACnC,IAAI,MAAM,OAAO,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC;AAC7C;AACA;AACA,IAAI,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACzD;AACA,IAAI,OAAO,gBAAgB,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACzD,CAAC;AACD;AACA,SAAS,gBAAgB,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE;AACvD,IAAI,MAAM,QAAQ,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;AAC5C,IAAI,SAAS,CAAC,OAAO,CAAC,IAAI,IAAI;AAC9B,QAAQ,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAClC,QAAQ,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,8BAA8B,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;AACjF;AACA,QAAQ,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AACvC,QAAQ,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,EAAE;AACzC,YAAY,MAAM,UAAU,GAAG,EAAE,CAAC;AAClC,YAAY,QAAQ,CAAC,OAAO,CAAC,WAAW,IAAI;AAC5C,gBAAgB,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;AAC3D,gBAAgB,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;AAC5C,gBAAgB,UAAU,CAAC,IAAI,CAAC,SAAS,EAAC;AAC1C,aAAa,CAAC,CAAC;AACf,YAAY,IAAI,CAAC,IAAI,GAAG,gBAAgB,CAAC,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACvE,SAAS;AACT,KAAK,EAAC;AACN,IAAI,OAAO,QAAQ,CAAC;AACpB,CAAC;AACD;AACA;AACA,SAAS,8BAA8B,CAAC,OAAO,EAAE,MAAM,EAAE;AACzD,IAAI,MAAM,MAAM,GAAG,EAAE,CAAC;AACtB,IAAI,KAAK,IAAI,IAAI,IAAI,OAAO,EAAE;AAC9B,QAAQ,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,EAAE;AAC9D,YAAY,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC9B,YAAY,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACjC,SAAS;AACT,KAAK;AACL,IAAI,OAAO,MAAM,CAAC;AAClB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iBAAiB,CAAC,KAAK,EAAE;AAClC,IAAI,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;AAC9B;AACA,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,IAAI;AAC1B,QAAQ,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;AACnC,KAAK,EAAC;AACN,IAAI,OAAO,OAAO,CAAC;AACnB;;AC3DO,SAAS,MAAM,CAAC,WAAW,EAAE;AACpC,IAAI,MAAM,UAAU,GAAG,EAAE,CAAC;AAC1B,IAAI,OAAO,UAAU,CAAC;AACtB;;;;"}