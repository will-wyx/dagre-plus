{"version":3,"file":"dagre-plus.es.js","sources":["../src/parser.js","../src/layouter.js"],"sourcesContent":["/**\r\n * 图的扁平的数据结构转成布局需要的树型\r\n * @param graphData\r\n * @return {{}}\r\n */\r\nexport function parse(graphData) {\r\n    if (!graphData) {\r\n        throw new Error('参数不合法')\r\n    }\r\n\r\n    let {nodes, edges} = graphData ?? {};\r\n    nodes = nodes ?? []\r\n    edges = edges ?? []\r\n\r\n    const edgeSet = new Set(edges);\r\n    const nodeMap = convertNodesToMap(nodes);\r\n\r\n    // 找到根节点\r\n    const rootNodes = nodes.filter(node => !node.parent);\r\n\r\n    return parseNodesToTree(rootNodes, nodeMap, edgeSet);\r\n}\r\n\r\n/**\r\n * 节点列表转成 map\r\n * @param nodes\r\n * @return {Map<any, any>}\r\n */\r\nfunction convertNodesToMap(nodes) {\r\n    const nodeMap = new Map();\r\n\r\n    nodes.forEach(node => {\r\n        nodeMap.set(node.id, node);\r\n    })\r\n    return nodeMap;\r\n}\r\n\r\nfunction parseNodesToTree(rootNodes, nodeMap, edgeSet, parent) {\r\n    const rootPart = {nodes: [], edges: []};\r\n    rootNodes.forEach(node => {\r\n        // parent 是折叠或隐藏状态，所有子节点节点隐藏\r\n        if (parent && (parent.collapsed || parent.hide)) {\r\n            node.hide = true;\r\n        }\r\n        rootPart.nodes.push(node);\r\n        rootPart.edges.push(...filterEdgesFromEdgeSetByNodeId(edgeSet, node.id));\r\n\r\n        const children = node.children;\r\n        if (children && children.length) {\r\n            const childNodes = [];\r\n            children.forEach(childNodeId => {\r\n                const childNode = nodeMap.get(childNodeId);\r\n                nodeMap.delete(childNodeId);\r\n                childNodes.push(childNode)\r\n            });\r\n            node.part = parseNodesToTree(childNodes, nodeMap, edgeSet, node);\r\n        }\r\n    })\r\n    return rootPart;\r\n}\r\n\r\n// 从 edge 集合里边筛选节点相关的边并从集合中移除\r\nfunction filterEdgesFromEdgeSetByNodeId(edgeSet, nodeId) {\r\n    const result = [];\r\n    for (let edge of edgeSet) {\r\n        if (edge.source === nodeId || edge.target === nodeId) {\r\n            result.push(edge);\r\n            edgeSet.delete(edge);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n","import dagre from 'dagre'\r\n\r\n/**\r\n * 布局并返回扁平化数据\r\n * @param nestedGraph\r\n * @param config\r\n * @return {{nodes: *[], edges: *[]}}\r\n */\r\nexport function layoutAndFlattenNestedGraph(nestedGraph, config) {\r\n    config.spacing = config.spacing || 40;\r\n    config.containerHeader = config.containerHeader || 0;\r\n\r\n    layout(nestedGraph, config);\r\n    return flattenNestedGraphAndConvertPosition(nestedGraph, config);\r\n}\r\n\r\n/**\r\n * 布局算法计算嵌套图的宽高和元素的相对位置，渲染图的时候需要计算各级节点的绝对位置\r\n * @param nestedGraph\r\n * @param config\r\n * @return {*}\r\n */\r\nexport function layout(nestedGraph, config) {\r\n    if (!nestedGraph) {\r\n        throw new Error('参数不合法');\r\n    }\r\n\r\n    // 先根据 config 里边的 prevGraph 给 nodes, edges 排序\r\n    if (config.prevGraph) {\r\n        sortGraphElementsByPrevGraph(nestedGraph, config.prevGraph);\r\n    }\r\n\r\n    const {nodes, edges} = nestedGraph;\r\n\r\n    // 需要递归对子元素进行布局算法的调用，为了计算 width、height\r\n    // 遍历 nodes 递归 layout\r\n    nodes.forEach(node => {\r\n        if (node.part) {\r\n            layout(node.part, config);\r\n        }\r\n    })\r\n\r\n    const g = initGraph(config);\r\n\r\n    addElementsToGraph(nestedGraph, g);\r\n\r\n    dagre.layout(g);\r\n\r\n    updateLayoutAttributes(nestedGraph, g);\r\n\r\n    const graph = g.graph();\r\n    nestedGraph.graph = {\r\n        width: graph.width + config.spacing,\r\n        height: graph.height + config.spacing + config.containerHeader\r\n    };\r\n    return nestedGraph;\r\n}\r\n\r\nfunction sortGraphElementsByPrevGraph(graph, prevGraph) {\r\n    const {nodes, edges} = graph;\r\n    const {nodes: prevNodes, edges: prevEdges} = prevGraph;\r\n\r\n    const nodeDimension = prevNodes.length;\r\n    const edgeDimension = prevEdges.length;\r\n\r\n    nodes.sort((a, b) => {\r\n        const prevNodeA = prevNodes.find(n => n.id === a.id);\r\n        const prevNodeB = prevNodes.find(n => n.id === b.id);\r\n\r\n        // 原图中没有节点，就给节点排到最后\r\n        if (!prevNodeA && !prevNodeB) {\r\n            return 0\r\n        } else if (!prevNodeA) {\r\n            return 1\r\n        } else if (!prevNodeB) {\r\n            return -1\r\n        }\r\n\r\n        const sortA = prevNodeA.rank * nodeDimension + prevNodeA.order;\r\n        const sortB = prevNodeB.rank * nodeDimension + prevNodeB.order;\r\n        return sortA - sortB;\r\n    });\r\n\r\n    // 排序 edges\r\n    edges.sort((a, b) => {\r\n        const prevEdgeA = prevEdges.findIndex(e => e.source === a.source && e.target === a.target);\r\n        const prevEdgeB = prevEdges.findIndex(e => e.source === b.source && e.target === b.target);\r\n\r\n        // 原图中没有，就排到最后\r\n        if (prevEdgeA === -1 && prevEdgeB === -1) {\r\n            return 0\r\n        } else if (prevEdgeA === -1) {\r\n            return 1\r\n        } else if (prevEdgeB === -1) {\r\n            return -1\r\n        }\r\n\r\n        return prevEdgeA - prevEdgeB;\r\n    })\r\n}\r\n\r\nfunction initGraph(config) {\r\n    const g = new dagre.graphlib.Graph();\r\n\r\n    g.setGraph({\r\n        rankdir: config.direction,\r\n        nodesep: config.nodesep ?? config.spacing,\r\n        edgesep: config.edgesep ?? config.spacing,\r\n        ranksep: config.ranksep ?? config.spacing,\r\n        acyclicer: config.acyclicer,\r\n        ranker: config.ranker,\r\n\r\n    }).setDefaultEdgeLabel(() => ({}));\r\n    return g;\r\n}\r\n\r\n/**\r\n * 将节点和边加入到用于布局的图上\r\n * @param nodes\r\n * @param edges\r\n * @param g\r\n */\r\nfunction addElementsToGraph({nodes, edges}, g) {\r\n    nodes.forEach(node => {\r\n        let width = node.width || 50, height = node.height || 50;\r\n        // 当节点是未折叠状态的容器\r\n        if (node.part && node.part.graph && !node.collapsed) {\r\n            width = node.part.graph.width;\r\n            height = node.part.graph.height;\r\n        }\r\n\r\n        // 节点隐藏宽高设 0\r\n        if (node.hide) {\r\n            width = 0;\r\n            height = 0;\r\n        }\r\n\r\n        g.setNode(node.id, {width, height});\r\n    });\r\n\r\n    edges.forEach(edge => {\r\n        g.setEdge(edge.source, edge.target);\r\n    });\r\n}\r\n\r\n/**\r\n * 将计算完的布局属性更新到图数据上\r\n * @param nodes\r\n * @param edges\r\n * @param g\r\n */\r\nfunction updateLayoutAttributes({nodes, edges}, g) {\r\n    // 将计算完的布局属性更新到节点上\r\n    nodes.forEach(node => {\r\n        Object.assign(node, g.node(node.id));\r\n    })\r\n\r\n    // 将计算完的布局属性更新到边上\r\n    edges.forEach(edge => {\r\n        const {source: v, target: w} = edge;\r\n        Object.assign(edge, g.edge({v, w}));\r\n    })\r\n}\r\n\r\n/**\r\n * 将嵌套的数据做扁平化处理，并且计算节点的绝对位置\r\n * @param nestedGraph\r\n * @param offset\r\n * @return {{nodes: *[], edges: *[]}}\r\n */\r\nfunction flattenNestedGraphAndConvertPosition(nestedGraph, config, offset) {\r\n    const flatGraph = {nodes: [], edges: []};\r\n    const {nodes, edges} = nestedGraph;\r\n    offset = offset ?? {x: 0, y: 0};\r\n    nodes.forEach(node => {\r\n        // 转换坐标\r\n        const x = node.x + offset.x, y = node.y + offset.y;\r\n        let width = node.width, height = node.height;\r\n\r\n        const baseData = {\r\n            id: node.id,\r\n            label: node.label,\r\n            width, height,\r\n            x, y,\r\n            rank: node.rank, order: node._order,\r\n            parent: node.parent, children: node.children,\r\n            collapsed: node.collapsed, hide: node.hide\r\n        }\r\n\r\n        let tempNode = config.keepOriginalNode ? {...node} : {}\r\n        tempNode = {...tempNode, ...baseData}\r\n\r\n        flatGraph.nodes.push(tempNode);\r\n        if (node.part) {\r\n            const parentOffset = {\r\n                x: x - width / 2 + config.spacing / 2,\r\n                y: y - height / 2 + config.spacing / 2 + config.containerHeader\r\n            }\r\n            const partNestedGraph = flattenNestedGraphAndConvertPosition(node.part, config, parentOffset);\r\n            flatGraph.nodes.push(...partNestedGraph.nodes);\r\n            flatGraph.edges.push(...partNestedGraph.edges);\r\n        }\r\n    });\r\n\r\n    edges.forEach(edge => {\r\n        if (edge.points) {\r\n            edge.points.forEach(point => {\r\n                point.x += offset.x;\r\n                point.y += offset.y;\r\n            })\r\n        }\r\n        flatGraph.edges.push(edge);\r\n    });\r\n    return flatGraph;\r\n}\r\n"],"names":[],"mappings":"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"}